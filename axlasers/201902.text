SELECT d.root_table_name, d.child_table_name
FROM relation_table d
WHERE
d.job_id = 99
 AND d.config_name =  AND d.root_schema =  AND d.child_schema =



SELECT
        CONCAT(GROUP_CONCAT(DISTINCT (root_table_name)) ,GROUP_CONCAT(DISTINCT (child_table_name)))
        FROM relation_table d,result_meta_table_display t
        WHERE d.job_id = 83
        AND d.config_name = t.config_name
        AND d.root_schema = t.`schema`
        AND d.child_schema = t.`schema`
        AND (d.root_table_name = t.table_name OR d.child_table_name = t.table_name)


		SELECT *
FROM relation_table d
WHERE (d.root_table_name = 'EMR_GONGNENGDXX' OR d.child_table_name = 'EMR_GONGNENGDXX')

app: 8080
mysql: 3306
es: 9300
neo4j: 7687(7474)
kafka: 9092(单节点)
zk: 2181(单节点)
redis: 6379(单节点)

chanjarster：
微信支付：417094183-chanjarster1235）
企业号/企业微信：185596009-chanjarster135）
微信开放平台（第三方平台）：678819830
小程序：654330231


1）群发消息：公众号可以以一定频次（订阅号为每天1次，服务号为每月4次），向用户群发消息，包括文字消息、图文消息、图片、视频、语音等。

2）被动回复消息：在用户给公众号发消息后，微信服务器会将消息发到开发者预先在开发者中心设置的服务器地址（开发者需要进行消息真实性验证），公众号可以在5秒内做出回复，可以回复一个消息，也可以回复命令告诉微信服务器这条消息暂不回复。被动回复消息可以设置加密（在公众平台官网的开发者中心处设置，设置后，按照消息加解密文档来进行处理。其他3种消息的调用因为是API调用而不是对请求的返回，所以不需要加解密）。

3）客服消息：在用户给公众号发消息后的48小时内，公众号可以给用户发送不限数量的消息，主要用于客服场景。用户的行为会触发事件推送，某些事件推送是支持公众号据此发送客服消息的，详见微信推送消息与事件说明文档。

4）模板消息：在需要对用户发送服务通知（如刷卡提醒、服务预约成功通知等）时，公众号可以用特定内容模板，主动向用户发送消息。

https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APPID&secret=APPSECRET

wx9e88875b0b0b9abc
1ebcaf0131666c80cc00d9fbf234118c


https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=wx9e88875b0b0b9abc&secret=1ebcaf0131666c80cc00d9fbf234118c

http://dm.xkcoding.com/


ojvZ61DzFNxp4c0Cj1UcW_EBiYHU

weixin.mchz.com.cn

{"errcode":40029,"errmsg":"invalid code, hints: [ req_id: DGKAyY4ce-pwWAla ]"}


SELECT * FROM APP_WE_CHAT_USER WHERE OPEN_ID = 'ojvZ61DzFNxp4c0Cj1UcW_EBiYHU'


The Abstract Factory pattern provides a way to encapsulate a group of individual factories that have a common theme without specifying their concrete classes. In normal usage, the client software creates a concrete implementation of the abstract factory and then uses the generic interface of the factory to create the concrete objects that are part of the theme. The client does not know (or care) which concrete objects it gets from each of these internal factories, since it uses only the generic interfaces of their products. This pattern separates the details of implementation of a set of objects from their general usage and relies on object composition, as object creation is implemented in methods exposed in the factory interface.



"openId": "ojvZ61PyT_jS63v1aUzf8IAMEdFU",
"avatar": "http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er1b1ZPmMGsEzygbFajtrcuzTW8fLoQicibgTq5J5OXRDbuSWPVZen4sKV0wrxpapmCyo0UVxBBXYEQ/132"

# me
{
  "code": 200,
  "message": "操作成功 !",
  "data": {
    "info": [
      {
        "OPEN_ID": "ojvZ61DzFNxp4c0Cj1UcW_EBiYHU",
        "SUPERIOR_EMPLOYEE_CODE": "2",
        "ID": 1,
        "SUPERIOR_OPEN_ID": "",
        "EMPLOYEE_CODE": "1",
        "AVATAR": "http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJpgTp0iasrEETlba8Fp8roFauXTGOBWFe6C9v86WtNlfGNSUZGqv3ImSiaiaRia8BdBL9SwAUoEsPT9w/132",
        "BIND_AT": 1551145197615
      }
    ],
    "status": 1
  }
}


 WxMpKefuMessage.WxArticle article1 = new WxMpKefuMessage.WxArticle();
            article1.setUrl("URL");
            article1.setPicUrl("PIC_URL");
            article1.setDescription("Is Really A Happy Day");
            article1.setTitle("Happy Day");

            WxMpKefuMessage.NEWS()
                    .toUser("OPENID")
                    .addArticle(article1)
                    .build();



            sendKefuMessage(WxMpKefuMessage
                    .TEXT()
                    .toUser(superiorOpenId)
                    .content("您有一条报告消息,请及时查收 !")
                    .build());


WxMpTemplateMessage templateMessage = WxMpTemplateMessage.builder()
      .toUser(configStorage.getOpenid())
      .templateId(configStorage.getTemplateId())
      .url(" ")
      .build();


 WxMpKefuMessage.WxArticle article1 = new WxMpKefuMessage.WxArticle();
            article1.setUrl("URL");
            article1.setPicUrl("http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er1b1ZPmMGsEzygbFajtrcuzTW8fLoQicibgTq5J5OXRDbuSWPVZen4sKV0wrxpapmCyo0UVxBBXYEQ/132");
            article1.setDescription("您收到一条总结报告,请及时查收 !");
            article1.setTitle("新通知");
            sendKefuMessage(WxMpKefuMessage
                    .NEWS()
                    .toUser(superiorOpenId)
                    .addArticle(article1)
                    .build());



 Object o = jdbcTemplate.queryForObject(getSql, new HospitalRowMapper<>().setData(ReportDetail.class.getName()), reportId);


@Data
@Accessors(chain = true)
public class HospitalRowMapper<T> implements RowMapper<T> {
    public String data;

    /**
     * jdbcTemplate查询mapper封装
     *
     * @param rs     结果集
     * @param rowNum 行号
     * @return 字段对应
     * @throws SQLException
     */
    @Override
    public T mapRow(ResultSet rs, int rowNum) throws SQLException {
        T bean = ReflectUtil.newInstance(data);

        // 获取元数据信息
        ResultSetMetaData metaData = rs.getMetaData();

        // 填充列信息
        for (int i = 0; i < metaData.getColumnCount(); i++) {
            String columnName = metaData.getColumnName(i + 1);
            Object columnValue = rs.getObject(i + 1);
            Class<?> m2 = ReflectUtil.getField(bean.getClass(), StrUtil.toCamelCase(columnName.toLowerCase())).getType();
            if (columnValue.getClass().equals(BigDecimal.class)) {
                if (m2.equals(Long.class)) {
                    columnValue = ((BigDecimal) columnValue).longValue();
                }
                if (m2.equals(Integer.class)) {
                    columnValue = ((BigDecimal) columnValue).intValue();
                }
            }
            ReflectUtil.setFieldValue(bean, StrUtil.toCamelCase(columnName.toLowerCase()), columnValue);
        }

        return bean;
    }
}



    public Object queryForObject(String sql, RowMapper<Object> mapper, Object... filedValues) {
        Object t;

        try {
            t = jdbcTemplate.queryForObject(sql, filedValues, mapper);
        } catch (Exception e) {
            log.error("========== jdbc执行sql异常, 堆栈信息 {}", e.getMessage());
            throw new HospitalException(Status.BAD_SAL_GRAMMAR);
        }

        return t;
    }


mckj1215
mckj123456

0.0.0.0:8087 192.168.241.242:1521


101.68.90.198这个的，外网端口是5112




 WxMpKefuMessage.WxArticle article1 = new WxMpKefuMessage.WxArticle();
            article1.setUrl("URL");
            article1.setPicUrl("PIC_URL");
            article1.setDescription("Is Really A Happy Day");
            article1.setTitle("Happy Day");

            WxMpKefuMessage.NEWS()
                    .toUser("OPENID")
                    .addArticle(article1)
                    .build();



            sendKefuMessage(WxMpKefuMessage
                    .TEXT()
                    .toUser(superiorOpenId)
                    .content("您有一条报告消息,请及时查收 !")
                    .build());


WxMpTemplateMessage templateMessage = WxMpTemplateMessage.builder()
      .toUser(configStorage.getOpenid())
      .templateId(configStorage.getTemplateId())
      .url(" ")
      .build();


 WxMpKefuMessage.WxArticle article1 = new WxMpKefuMessage.WxArticle();
            article1.setUrl("URL");
            article1.setPicUrl("http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er1b1ZPmMGsEzygbFajtrcuzTW8fLoQicibgTq5J5OXRDbuSWPVZen4sKV0wrxpapmCyo0UVxBBXYEQ/132");
            article1.setDescription("您收到一条总结报告,请及时查收 !");
            article1.setTitle("新通知");
            sendKefuMessage(WxMpKefuMessage
                    .NEWS()
                    .toUser(superiorOpenId)
                    .addArticle(article1)
                    .build());



@Configuration
@PropertySource(value = "file:${user.dir}/config/customize.properties", ignoreResourceNotFound = true)
public class InitCustomizeUrlConfig {

